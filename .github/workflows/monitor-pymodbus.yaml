name: Monitor PyModbus Dependency in HA

on:
  schedule:
    # Run the last dat of the month
    - cron: '0 0 31 * *' # At 00:00 UTC on day-of-month 31 (which resolves to the last day)
  workflow_dispatch: # Allow manual triggering

jobs:
  monitor-pymodbus:
    runs-on: ubuntu-latest
    name: Check PyModbus version in Home Assistant Core

    # Update this version when PyModbus is updated in Home Assistant Core
    env:
      LAST_KNOWN_PYMODBUS_VERSION: "3.11.0"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Fetch Home Assistant requirements
      id: fetch-requirements
      run: |
        # Fetch the requirements_all.txt file from Home Assistant core
        curl -s https://raw.githubusercontent.com/home-assistant/core/dev/requirements_all.txt > ha_requirements.txt

        # Extract pymodbus version
        PYMODBUS_VERSION=$(grep -E '^pymodbus==' ha_requirements.txt | cut -d'=' -f3)

        if [ -z "$PYMODBUS_VERSION" ]; then
          echo "PyModbus not found in requirements"
          echo "pymodbus_version=" >> $GITHUB_OUTPUT
          echo "pymodbus_found=false" >> $GITHUB_OUTPUT
        else
          echo "Found PyModbus version: $PYMODBUS_VERSION"
          echo "pymodbus_version=$PYMODBUS_VERSION" >> $GITHUB_OUTPUT
          echo "pymodbus_found=true" >> $GITHUB_OUTPUT
        fi

        # Store the full requirements content for comparison
        echo "requirements_content<<EOF" >> $GITHUB_OUTPUT
        cat ha_requirements.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Check for version changes
      id: check-changes
      run: |
        if [ "${{ steps.fetch-requirements.outputs.pymodbus_found }}" == "true" ]; then
          CURRENT_VERSION="${{ steps.fetch-requirements.outputs.pymodbus_version }}"
          LAST_VERSION="${{ env.LAST_KNOWN_PYMODBUS_VERSION }}"

          echo "Last known version: $LAST_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if [ "$LAST_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Version changed from $LAST_VERSION to $CURRENT_VERSION"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "old_version=$LAST_VERSION" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $CURRENT_VERSION"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "PyModbus not found in requirements"
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Create issue on version change
      if: steps.check-changes.outputs.version_changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'pymodbus-update'
          });

          // Check if an issue already exists for this version
          const newVersion = '${{ steps.check-changes.outputs.new_version }}';
          const existingIssue = issues.find(issue =>
            issue.title.includes(`PyModbus ${newVersion}`) &&
            issue.labels.some(label => label.name === 'pymodbus-update')
          );

          if (!existingIssue) {
            const oldVersion = '${{ steps.check-changes.outputs.old_version }}';
            const title = `PyModbus updated to ${newVersion} in Home Assistant Core`;

            const body = `## PyModbus Version Update Detected

            **Previous version:** ${oldVersion === 'none' ? 'Not tracked' : oldVersion}
            **New version:** ${newVersion}

            The PyModbus dependency in Home Assistant Core has been updated.

            ### Next Steps
            - [ ] Review the PyModbus changelog for breaking changes
            - [ ] Test the integration with the new version
            - [ ] Update any version constraints if needed
            - [ ] Update documentation if necessary

            ### Home Assistant Requirements
            The update was detected in: https://github.com/home-assistant/core/blob/dev/requirements_all.txt

            ---
            *This issue was automatically created by the PyModbus monitoring workflow.*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['pymodbus-update', 'dependencies', 'automated']
            });

            console.log(`Created issue for PyModbus version ${newVersion}`);
          } else {
            console.log(`Issue already exists for PyModbus version ${newVersion}`);
          }


    - name: Summary
      run: |
        echo "## PyModbus Monitoring Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.fetch-requirements.outputs.pymodbus_found }}" == "true" ]; then
          echo "✅ **PyModbus found in Home Assistant Core**" >> $GITHUB_STEP_SUMMARY
          echo "- **Current version:** ${{ steps.fetch-requirements.outputs.pymodbus_version }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-changes.outputs.version_changed }}" == "true" ]; then
            echo "- **Status:** 🔄 **Version updated!**" >> $GITHUB_STEP_SUMMARY
            echo "- **Previous version:** ${{ steps.check-changes.outputs.old_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **New version:** ${{ steps.check-changes.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Action:** Issue created for review" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ✅ No changes detected" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **PyModbus not found in Home Assistant Core requirements**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Last checked:** $(date -u)" >> $GITHUB_STEP_SUMMARY
